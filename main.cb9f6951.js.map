{"version":3,"sources":["scripts/addNewRow.js","scripts/createSelect.js","scripts/pushNotification.js","scripts/createForm.js","scripts/setActiveRowHandler.js","scripts/sortingHandler.js","scripts/main.js"],"names":["addNewRow","arrOfValues","tbody","document","querySelector","append","lastElementChild","cloneNode","children","forEach","el","i","innerText","cities","createOptions","towns","map","join","createHTMLSelect","selectName","capitalizedSelectName","toUpperCase","slice","pushNotification","posTop","posRight","title","description","type","notification","createElement","className","style","top","right","insertAdjacentHTML","body","setTimeout","remove","convertToString","num","toLocaleString","createForm","newForm","form","addEventListener","e","preventDefault","inputs","target","elements","resArr","length","inputName","name","trimmedValue","value","trim","push","reset","setActiveRowHandler","table","rows","row","parentElement","tagName","element","classList","add","sortingParams","column","rowsLength","onlyNumbers","string","replace","sortingHandler","tableHead","tableBody","tableRows","index","cellIndex","reverse","sort","a","b","el1","el2","isNaN","localeCompare"],"mappings":"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","file":"main.cb9f6951.js","sourceRoot":"..\\src","sourcesContent":["export function addNewRow(arrOfValues) {\n  const tbody = document.querySelector('tbody');\n\n  tbody.append(tbody.lastElementChild.cloneNode(true));\n\n  [...tbody.lastElementChild.children].forEach((el, i) => {\n    el.innerText = arrOfValues[i];\n  });\n}\n","'use strict';\n\nconst cities = [\n  'Tokyo',\n  'Singapore',\n  'London',\n  'New York',\n  'Edinburgh',\n  'San Francisco',\n];\n\nconst createOptions = (towns) =>\n  towns.map((el) => `<option value=\"${el}\">${el}</option>`).join(' ');\n\nexport const createHTMLSelect = (selectName) => {\n  const capitalizedSelectName =\n    selectName[0].toUpperCase() + selectName.slice(1);\n\n  return `\n    <label>${capitalizedSelectName}:\n        <select name=${selectName} data-qa=${selectName}>\n          ${createOptions(cities)}\n        </select>\n      </label>\n  `;\n};\n","export const pushNotification = (\n  posTop,\n  posRight,\n  title,\n  description,\n  type,\n) => {\n  const notification = document.createElement('div');\n\n  notification.className = `notification ${type}`;\n  notification.style.top = `${posTop}px`;\n  notification.style.right = `${posRight}px`;\n\n  notification.insertAdjacentHTML(\n    'afterbegin',\n    `\n      <h2 class=\"title\">${title}</h2>\n      <p>${description}</p>\n    `,\n  );\n\n  document.body.append(notification);\n\n  setTimeout(() => notification.remove(), 2000);\n};\n","'use strict';\n\nimport { addNewRow } from './addNewRow.js';\nimport { createHTMLSelect } from './createSelect.js';\nimport { pushNotification } from './pushNotification.js';\n\nconst convertToString = (num) => '$' + num.toLocaleString('en-EN');\n\nexport function createForm() {\n  const newForm = `\n    <form class=\"new-employee-form\">\n      <label>Name:\n        <input type=\"text\" name=\"name\" data-qa=\"name\" />\n      </label>\n\n      <label>Position:\n        <input type=\"text\" name=\"position\" data-qa=\"position\" />\n      </label>\n\n      ${createHTMLSelect('office')}\n\n      <label>Age:\n        <input\n          type=\"number\"\n          name=\"age\"\n          data-qa=\"age\"\n          min=\"18\"\n          max=\"90\"\n        />\n      </label>\n\n      <label>Salary:\n        <input type=\"number\" name=\"salary\" min=\"1\" data-qa=\"salary\" />\n      </label>\n\n      <button>Save to table</button>\n    </form>\n  `;\n\n  document.body.insertAdjacentHTML('beforeend', newForm);\n\n  const form = document.querySelector('.new-employee-form');\n\n  form.addEventListener('submit', (e) => {\n    e.preventDefault();\n\n    const inputs = [...e.target.elements].slice(0, 5);\n    const resArr = [];\n\n    for (let i = 0; i < inputs.length; i++) {\n      const inputName = inputs[i].name;\n      const trimmedValue = inputs[i].value.trim();\n\n      if (!trimmedValue) {\n        pushNotification(\n          10,\n          10,\n          'Validation failed!',\n          'Empty fields not allowed!',\n          'error',\n        );\n\n        return;\n      }\n\n      if (inputName === 'name' && trimmedValue.length < 4) {\n        pushNotification(\n          10,\n          10,\n          'Validation failed!',\n          'Name must have more than 4 characters.',\n          'error',\n        );\n\n        return;\n      }\n\n      if (inputName === 'age' && (+trimmedValue < 18 || +trimmedValue > 90)) {\n        pushNotification(\n          10,\n          10,\n          'Validation failed!',\n          \"Age value can't be less 18 or more than 90\",\n          'error',\n        );\n\n        return;\n      }\n\n      if (inputName === 'salary') {\n        resArr.push(convertToString(+trimmedValue));\n\n        continue;\n      }\n\n      resArr.push(trimmedValue);\n    }\n\n    addNewRow(resArr);\n\n    pushNotification(\n      10,\n      10,\n      'New employee added!',\n      \"You've just added a new employee to the table\",\n      'success',\n    );\n\n    form.reset();\n  });\n}\n","'use strict';\n\nexport const setActiveRowHandler = () => {\n  const table = document.querySelector('tbody');\n\n  table.addEventListener('click', (e) => {\n    const rows = [...table.rows];\n\n    const row = e.target.parentElement;\n\n    if (row.tagName !== 'TR' || row.className === 'active') {\n      return;\n    }\n\n    rows.forEach((element) => {\n      element.classList.remove('active');\n    });\n\n    row.classList.add('active');\n  });\n};\n","'use strict';\n\nconst sortingParams = {\n  column: null,\n  rowsLength: null,\n};\n\nconst onlyNumbers = (string) => +string.replace(/[$,]/g, '');\n\nexport const sortingHandler = () => {\n  const tableHead = document.querySelector('thead');\n  const tableBody = document.querySelector('tbody');\n\n  tableHead.addEventListener('click', (e) => {\n    const tableRows = [...tableBody.rows];\n    const index = e.target.cellIndex;\n\n    const { column, rowsLength } = sortingParams;\n\n    if (column === index && rowsLength === tableRows.length) {\n      tableRows.reverse();\n    } else {\n      sortingParams.column = index;\n      sortingParams.rowsLength = tableRows.length;\n\n      tableRows.sort((a, b) => {\n        const el1 = a.children[index].innerText;\n        const el2 = b.children[index].innerText;\n\n        return isNaN(onlyNumbers(el1))\n          ? el1.localeCompare(el2)\n          : onlyNumbers(el1) - onlyNumbers(el2);\n      });\n    }\n\n    tableBody.append(...tableRows);\n  });\n};\n","'use strict';\n\nimport { createForm } from './createForm';\nimport { setActiveRowHandler } from './setActiveRowHandler';\nimport { sortingHandler } from './sortingHandler';\n\ncreateForm();\nsortingHandler();\nsetActiveRowHandler();\n"]}